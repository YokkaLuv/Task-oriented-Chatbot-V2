const chatBox = document.getElementById("chat-box");
const inputField = document.getElementById("user-input");
const sendButton = document.getElementById("send-button");
const designInfoBox = document.getElementById("design-info");

let chatHistory = [];
let collectedData = {};
const sessionId = crypto.randomUUID();
const BASE_URL = window.location.origin;

// G·ª≠i khi Enter (tr·ª´ Shift)
inputField.addEventListener("keydown", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    sendButton.click();
  }
});

// Auto height textarea
inputField.addEventListener("input", () => {
  inputField.style.height = "auto";
  inputField.style.height = inputField.scrollHeight + "px";
});

// G·ª≠i tin nh·∫Øn
sendButton.addEventListener("click", async () => {
  const userMessage = inputField.value.trim();
  if (!userMessage) return;

  appendMessage("user", userMessage);
  chatHistory.push({ role: "user", content: userMessage });
  inputField.value = "";
  inputField.style.height = "38px";

  try {
    const response = await fetch(`${BASE_URL}/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        session_id: sessionId,
        message: userMessage,
        history: chatHistory,
        design_data: collectedData,
      }),
    });

    const data = await response.json();

    const assistantReply = data.reply || "Xin l·ªói, t√¥i ch∆∞a x·ª≠ l√Ω ƒë∆∞·ª£c y√™u c·∫ßu.";
    chatHistory.push({ role: "assistant", content: assistantReply });
    appendMessage("assistant", assistantReply);

    if (data.image_url) {
      appendImage(data.image_url);
    }

    // ‚ùóÔ∏èLu√¥n fetch l·∫°i design_data m·ªõi nh·∫•t t·ª´ server
    await fetchDesignDataAndUpdateSidebar();

  } catch (error) {
    console.error("L·ªói khi g·ªçi API:", error);
    appendMessage("assistant", "‚ùå C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.");
  }
});

// Tin nh·∫Øn ch√†o + fetch design_data ban ƒë·∫ßu
window.addEventListener("load", async () => {
  const welcome = `
Xin ch√†o qu√Ω kh√°ch! T√¥i l√† tr·ª£ l√Ω thi·∫øt k·∫ø ·∫£o th√¥ng minh, nhi·ªám v·ª• c·ªßa t√¥i l√† ghi nh·∫≠n v√† gi√∫p ƒë·ª° thi·∫øt k·∫ø √Ω t∆∞·ªüng cho qu√Ω kh√°ch.

**-- Kh·∫£ nƒÉng c·ªßa t√¥i --**

T√¥i c√≥ kh·∫£ nƒÉng l√†m ƒë∆∞·ª£c nh·ªØng vi·ªác nh∆∞ sau:
- T√¥i c√≥ th·ªÉ thu th·∫≠p th√¥ng tin v·ªÅ √Ω t∆∞·ªüng thi·∫øt k·∫ø mong mu·ªën c·ªßa qu√Ω kh√°ch
- T√¥i s·∫Ω t·∫°o ra v√†i √Ω t∆∞·ªüng thi·∫øt k·∫ø v√† demo n·∫øu nh∆∞ qu√Ω kh√°ch y√™u c·∫ßu tr·ª±c ti·∫øp v√† c√≥ ƒë·ªß c√°c th√¥ng tin thi·∫øt y·∫øu

**-- L∆∞u √Ω khi s·ª≠ d·ª•ng --**

ƒê·ªÉ c√≥ th·ªÉ c√≥ ƒë∆∞·ª£c tr·∫£i nghi·ªám t·ªët nh·∫•t, xin qu√Ω kh√°ch vui l√≤ng tu√¢n th·ªß theo c√°c √Ω sau:
- C√¢u t·ª´ r√µ nghƒ©a v√† d·ªÖ hi·ªÉu
- H√£y cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt tr∆∞·ªõc khi y√™u c·∫ßu t·∫°o √Ω t∆∞·ªüng hay t·∫°o demo
- Y√™u c·∫ßu c√†ng chi ti·∫øt th√¨ ƒë·ªô ch√≠nh x√°c c√†ng cao
- T√¥i ch·ªâ c√≥ th·ªÉ gi√∫p l√™n √Ω t∆∞·ªüng t·∫°m th·ªùi, ƒë·ªÉ c√≥ ƒë∆∞·ª£c s·∫£n ph·∫©m chuy√™n nghi·ªáp v√† ho√†n ch·ªânh, xin vui l√≤ng li√™n h·ªá l·∫°i v·ªõi nh√¢n vi√™n ch√≠nh th·ª©c trong c√¥ng ty

C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa c√¥ng ty ch√∫ng t√¥i.
ƒê·ªÉ b·∫Øt ƒë·∫ßu, xin h√£y g·ª≠i y√™u c·∫ßu c·ªßa qu√Ω kh√°ch ƒë·ªÉ t√¥i c√≥ th·ªÉ gi√∫p ƒë·ª° ·∫°.
  `;
  appendMessage("assistant", welcome);
  chatHistory.push({ role: "assistant", content: welcome });

  // üÜï Load th√¥ng tin thi·∫øt k·∫ø n·∫øu c√≥
  await fetchDesignDataAndUpdateSidebar();
});

// Hi·ªÉn th·ªã tin nh·∫Øn
function appendMessage(role, text) {
  const msg = document.createElement("div");
  msg.className = role === "user" ? "user-msg" : "bot-msg";

  if (role === "assistant") {
    msg.innerHTML = marked.parse(text);
  } else {
    msg.innerHTML = text
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/\n/g, "<br>");
  }

  chatBox.appendChild(msg);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// Hi·ªÉn th·ªã ·∫£nh
function appendImage(url) {
  const img = document.createElement("img");
  img.src = url;
  img.alt = "Generated Image";
  img.className = "generated-image";
  img.style.marginTop = "10px";
  chatBox.appendChild(img);
  chatBox.scrollTop = chatBox.scrollHeight;
}

// ‚úÖ C·∫≠p nh·∫≠t l·∫°i th√¥ng tin b√™n ph·∫£i
async function fetchDesignDataAndUpdateSidebar() {
  try {
    const response = await fetch(`${BASE_URL}/design_data/${sessionId}`);
    const result = await response.json();

    if (result && typeof result === "object") {
      collectedData = result;
      updateDesignInfoBox(result);
    }
  } catch (err) {
    console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thi·∫øt k·∫ø:", err);
  }
}

// ‚úÖ Render card UI thay cho JSON th√¥
function updateDesignInfoBox(data) {
  try {
    let html = "";

    for (const [key, value] of Object.entries(data)) {
      const readableKey = convertKeyToLabel(key);
      const readableValue = Array.isArray(value) ? value.join(", ") : value;

      html += `
        <div class="info-card">
          <h3>${readableKey}</h3>
          <p>${readableValue}</p>
        </div>
      `;
    }

    designInfoBox.innerHTML = html || "<p>Ch∆∞a c√≥ th√¥ng tin n√†o ƒë∆∞·ª£c ghi nh·∫≠n.</p>";
  } catch {
    designInfoBox.innerHTML = "<p>Kh√¥ng th·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu.</p>";
  }
}

// ‚úÖ Mapping key k·ªπ thu·∫≠t sang nh√£n ti·∫øng Vi·ªát
function convertKeyToLabel(key) {
  const map = {
    product: "S·∫£n ph·∫©m thi·∫øt k·∫ø",
    color: "M√†u s·∫Øc",
    style: "Phong c√°ch",
    notes: "Ghi ch√∫ th√™m",
    company: "Doanh nghi·ªáp (n·∫øu c√≥)",
    selected_concept: "√ù t∆∞·ªüng ƒë√£ ch·ªçn",
    // Th√™m c√°c field kh√°c n·∫øu c·∫ßn
  };
  return map[key] || key;
}

// Toggle menu b√™n tr√°i (mobile)
document.getElementById("toggle-left").addEventListener("click", () => {
  document.getElementById("sidebar-left").classList.toggle("active");
});

// Toggle menu b√™n ph·∫£i (mobile)
const infoToggleButton = document.getElementById("toggle-right");
if (infoToggleButton) {
  infoToggleButton.addEventListener("click", () => {
    document.querySelector(".sidebar-right").classList.toggle("active");
  });
};
