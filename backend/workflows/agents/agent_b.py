from services.openai_service import ask_gpt_json
from services.db_service import (
    update_design_data,
    init_session,
    append_notes_to_design_data,
    remove_design_fields,
    remove_specific_field_values
)
from schemas.design_schema import DEFAULT_DESIGN_DATA

def extract_and_store_info(phrase: str, session_id: str):
    """
    Agent B: Nh·∫≠n m·ªôt c√¢u (phrase), tr√≠ch xu·∫•t th√¥ng tin thi·∫øt k·∫ø, l∆∞u v√†o DB.
    """

    prompt = f"""
B·∫°n l√† chuy√™n gia tr√≠ch xu·∫•t th√¥ng tin thi·∫øt v·ªÅ ng·ªØ nghƒ©a c·ªßa ti·∫øng Vi·ªát ho·∫°t ƒë·ªông trong m·ªôt h·ªá th·ªëng chatbot ƒëa t√°c v·ª•, nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t c√°c th√¥ng tin thi·∫øt k·∫ø s·∫£n ph·∫©m t·ª´ c√¢u ti·∫øng Vi·ªát v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON

Tr√≠ch xu·∫•t c√†ng ƒë·∫ßy ƒë·ªß c√†ng t·ªët c√°c tr∆∞·ªùng sau (n·∫øu c√≥):

product, color, style, company, notes

N·∫øu th√¥ng tin kh√¥ng thu·ªôc c√°c tr∆∞·ªùng tr√™n, h√£y cho v√†o tr∆∞·ªùng "notes".

Ch·ªâ tr·∫£ v·ªÅ JSON object duy nh·∫•t
V√≠ d·ª• 1: 
ƒê·∫ßu v√†o: T√¥i mu·ªën thi·∫øt k·∫ø 1 c√°i √°o thun m√†u tr·∫Øng
ƒê·∫ßu ra:
{{
  "product": "√°o thun",
  "color": "tr·∫Øng",
}}

V√≠ d·ª• 2:
ƒê·∫ßu v√†o: √Åo c√≥ in logo ·ªü gi·ªØa 
ƒê·∫ßu ra:
{{
  "notes": "c√≥ in logo ·ªü gi·ªØa",
}}

V√≠ d·ª• 3:
ƒê·∫ßu v√†o: Trang web n·ªÅn tr·∫Øng c√≥ thanh menu m√†u xanh
ƒê·∫ßu ra:
{{
  "product": "trang web",
  "color": "tr·∫Øng",
  "notes": "c√≥ thanh menu m√†u xanh",
}}

N·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c g√¨, tr·∫£ v·ªÅ {{}}

C√¢u:
"{phrase}"
"""

    result = ask_gpt_json([{"role": "user", "content": prompt}], temperature=0.3)
    print(f"[Agent B Output] GPT tr·∫£ v·ªÅ: {result}")

    if not isinstance(result, dict) or not result:
        print(f"[Agent B] ‚ö†Ô∏è Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c th√¥ng tin t·ª´ phrase: {phrase}")
        return

    valid_data = {}
    notes_text = None

    for key, value in result.items():
        if key == "notes":
            notes_text = str(value).strip()
            continue

        if key in DEFAULT_DESIGN_DATA:
            if key == "company" and str(value).strip().lower() in ["c√° nh√¢n", "t√¥i", "m√¨nh", "ri√™ng", "t√¥i d√πng"]:
                print(f"[Agent B] ‚ÑπÔ∏è Ghi nh·∫≠n l√† c√° nh√¢n ‚Üí gi·ªØ m·∫∑c ƒë·ªãnh, kh√¥ng ghi ƒë√®.")
                continue

            if isinstance(DEFAULT_DESIGN_DATA[key], list):
                if isinstance(value, str):
                    value_list = [v.strip() for v in value.split(",") if v.strip()]
                elif isinstance(value, list):
                    value_list = [str(v).strip() for v in value if str(v).strip()]
                else:
                    continue
                if value_list:
                    valid_data[key] = value_list
            else:
                valid_data[key] = str(value).strip()
        else:
            print(f"[Agent B] ‚ö†Ô∏è Field kh√¥ng h·ª£p l·ªá: {key} ‚Üí b·ªã lo·∫°i")

    init_session(session_id)

    if valid_data:
        update_design_data(session_id, valid_data)
        print(f"[Agent B] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t DB v·ªõi: {valid_data}")

    if notes_text:
        append_notes_to_design_data(session_id, notes_text)
        print(f"[Agent B] üìù Ghi ch√∫ b·ªï sung: {notes_text}")

    if not valid_data and not notes_text:
        print(f"[Agent B] ‚ö†Ô∏è Kh√¥ng c√≥ g√¨ ƒë·ªÉ l∆∞u t·ª´ phrase: {phrase}")


def remove_info(phrase: str, session_id: str):
    """
    Agent B: X·ª≠ l√Ω y√™u c·∫ßu xo√° th√¥ng tin c·ª• th·ªÉ trong thi·∫øt k·∫ø.
    """

    prompt = f"""
B·∫°n l√† AI chuy√™n x·ª≠ l√Ω y√™u c·∫ßu thi·∫øt k·∫ø. H√£y ph√¢n t√≠ch c√¢u sau v√† tr√≠ch ra c√°c field v√† gi√° tr·ªã m√† ng∆∞·ªùi d√πng mu·ªën xo√°.

C√°c field hi·ªán ƒëang c√≥ nh∆∞ sau:
- products
- color
- style
- company
- notes

Y√™u c·∫ßu:
- Tr·∫£ v·ªÅ danh s√°ch c√°c dict d·∫°ng: [{{"field": "color", "value": "ƒë·ªè"}}, ...]
- N·∫øu kh√¥ng c√≥ gi√° tr·ªã c·ª• th·ªÉ, th√¨ ch·ªâ c·∫ßn field th√¥i: [{{"field": "style"}}]
- N·∫øu kh√¥ng r√µ r√†ng, tr·∫£ v·ªÅ []
- Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£, kh√¥ng gi·∫£i th√≠ch, kh√¥ng m·ªü ƒë·∫ßu, kh√¥ng k·∫øt lu·∫≠n g√¨ th√™m

C√¢u: "{phrase}"
"""

    result = ask_gpt_json([{"role": "user", "content": prompt}], temperature=0.2)
    print(f"[Agent B Remove] GPT tr·∫£ v·ªÅ: {result}")

    if not isinstance(result, list) or not result:
        print(f"[Agent B Remove] ‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c th√¥ng tin c·∫ßn xo√°.")
        return

    fields_to_remove = []
    value_specific_removal = []

    for item in result:
        if isinstance(item, dict) and "field" in item:
            field = item["field"]
            if field not in DEFAULT_DESIGN_DATA:
                continue

            if "value" in item:
                value_specific_removal.append((field, item["value"]))
            else:
                fields_to_remove.append(field)

    if fields_to_remove:
        remove_design_fields(session_id, fields_to_remove)
        print(f"[Agent B Remove] ‚úÖ ƒê√£ xo√° to√†n b·ªô field: {fields_to_remove}")

    for field, value in value_specific_removal:
        remove_specific_field_values(session_id, field, value)
        print(f"[Agent B Remove] ‚úÖ ƒê√£ xo√° gi√° tr·ªã '{value}' kh·ªèi field '{field}'")

    return {
        "removed_fields": fields_to_remove,
        "removed_values": value_specific_removal
    }
